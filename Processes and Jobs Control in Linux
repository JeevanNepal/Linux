Processes and Job Control:
=========================

Listing Processes and Displaying Information
To display the currently running processes use the ps command. If no options are specified, ps
displays the processes associated with your current session. To see every process including
ones that are not owned by you, use ps -e . To see processes running by a specific use, use ps
-u username .
ps - Display process status.
Common ps options:
-e - Everything, all processes.
-f - Full format listing.
-u username - Display processes running as username.
-p pid - Display process information for pid. A PID is a process ID.
Common ps commands:
ps -e - Display all processes.
ps -ef - Display all processes.
ps -eH - Display a process tree.
ps -e --forest - Display a process tree.
ps -u username - Display processes running as username.
$ ps
PID TTY TIME CMD
19511 pts/2 00:00:00 bash
19554 pts/2 00:00:00 ps
$ ps -p 19511
PID TTY TIME CMD
19511 pts/2 00:00:00 bash
$ ps -f
UID PID PPID C STIME TTY TIME CMD
bob 19511 19509 0 16:50 pts/2 00:00:00 -bash
bob 19556 19511 0 16:50 pts/2 00:00:00 ps -f
$ ps -e | head
PID TTY TIME CMD
1 ? 00:00:02 init
2 ? 00:00:00 kthreadd
3 ? 00:00:19 ksoftirqd/0
5 ? 00:00:00 kworker/0:0H
7 ? 00:00:00 migration/0
8 ? 00:00:00 rcu_bh
9 ? 00:00:17 rcu_sched
10 ? 00:00:12 watchdog/0
11 ? 00:00:00 khelper
$ ps -ef | head
UID PID PPID C STIME TTY TIME CMD
root 1 0 0 Dec27 ? 00:00:02 /sbin/init
root 2 0 0 Dec27 ? 00:00:00 [kthreadd]
root 3 2 0 Dec27 ? 00:00:19 [ksoftirqd/0]
root 5 2 0 Dec27 ? 00:00:00 [kworker/0:0H]
root 7 2 0 Dec27 ? 00:00:00 [migration/0]
root 8 2 0 Dec27 ? 00:00:00 [rcu_bh]
root 9 2 0 Dec27 ? 00:00:17 [rcu_sched]
root 10 2 0 Dec27 ? 00:00:12 [watchdog/0]
root 11 2 0 Dec27 ? 00:00:00 [khelper]
$ ps -fu www-data
UID PID PPID C STIME TTY TIME CMD
www-data 941 938 0 Dec27 ? 00:00:00 /usr/sbin/apache2 -k start
www-data 942 938 0 Dec27 ? 00:00:00 /usr/sbin/apache2 -k start
www-data 943 938 0 Dec27 ? 00:00:00 /usr/sbin/apache2 -k start
Here are other commands that allow you to view running processes.
pstree - Display running processes in a tree format.
htop - Interactive process viewer. This command is less common than top and may not be
available on the system.
top - Interactive process viewer.
Running Processes in the Foreground and Background
Up until this point all the commands you have been executing have been running in the
foreground. When a command, process, or program is running in the foreground the shell prompt
will not be displayed until that process exits. For long running programs it can be convenient to
send them to the background. Processes that are backgrounded still execute and perform their
task, however they do not block you from entering further commands at the shell prompt. To
background a process, place an ampersand (& ) at the end of the command.
command & - Start command in the background.
Ctrl-c - Kill the foreground process.
Ctrl-z - Suspend the foreground process.
bg [%num] - Background a suspended process.
fg [%num] - Foreground a background process.
kill [%num] - Kill a process by job number or PID.
jobs [%num] - List jobs.
$ ./long-running-program &
[1] 22686
$ ps -p 22686
PID TTY TIME CMD
22686 pts/1 00:00:00 long-running-pr
$ jobs
[1]+ Running ./long-running-program &
$ fg
./long-running-program
When a command is backgrounded two numbers are displayed. The number in brackets is the
job number and can be referred by preceding it with the percent sign. The second number is the
PID. Here is what it looks like to start multiple processes in the background.
$ ./long-running-program &
[1] 22703
$ ./long-running-program &
[2] 22705
$ ./long-running-program &
[3] 22707
$ ./long-running-program &
[4] 22709
$ jobs
[1] Done ./long-running-program
[2] Done ./long-running-program
[3]- Running ./long-running-program &
[4]+ Running ./long-running-program &
The plus sign (+ ) in the jobs output represents the current job while the minus sign (- )
represents the previous job. The current job is considered to be the last job that was stopped
while it was in the foreground or the last job started in the background. The current job can be
referred to by %% or %+ . If no job information is supplied to the fg or bg commands, the current
job is operated upon. The previous job can be referred to by %- .
You will notice that jobs number 1 and 2 are reported as being done. The shell does not interrupt
your current command line, but will report job statuses right before a new prompt is displayed.
For example, if you start a program in the background a prompt is returned. The shell will not
report the status of the job until a new prompt is displayed. You can request a new prompt be
displayed by simply hitting Enter .
To bring a job back to the foreground, type the name of the job or use the fg command. To
foreground the current job execute %% , %+ , fg , fg %% , fg %+ , or fg %num . To foreground job
number 3, execute %3 or fg %3 .
$ jobs
[3]- Running ./long-running-program &
[4]+ Running ./long-running-program &
$ fg %3
./long-running-program
$
To pause or suspend a job that is running in the foreground, type Ctrl-z . Once a job is
suspended it can be resumed in the foreground or background. To background a suspended job
type the name of the job followed by an ampersand or use bg followed by the job name.
$ jobs
[1] Running ./long-running-program &
[2]- Running ./long-running-program &
[3]+ Running ./another-program &
$ fg
./another-program
^Z
[3]+ Stopped ./another-program
$ jobs
[1] Running ./long-running-program &
[2]- Running ./long-running-program &
[3]+ Stopped ./another-program
$ bg %3
[3]+ ./another-program &
$ jobs
[1] Running ./long-running-program &
[2]- Running ./long-running-program &
[3]+ Running ./another-program &
$
You can stop or kill a background job using the kill command. For example, to kill job number 1
execute kill %1 . To kill a job that is running in the foreground, type Ctrl-c .
$ jobs
[1] Running ./long-running-program &
[2]- Running ./long-running-program &
[3]+ Running ./another-program &
$ kill %1
[1] Terminated ./long-running-program
$ jobs
[2]- Running ./long-running-program &
[3]+ Running ./another-program &
$ fg %2
./long-running-program
^C
$ jobs
[3]+ Running ./another-program &
$
Killing Processes
Ctrl-c - Kills the foreground process.
kill [signal] pid - Send a signal to a process.
kill -l - Display a list of signals.
The default signal used by kill is termination. You will see this signal referred to as SIGTERM or
TERM for short. Signals have numbers that correspond to their names. The default TERM signal
is number 15. So running kill pid , kill -15 pid , and kill -TERM pid are all equivalent. If a
process does not terminate when you send it the TERM signal, use the KILL signal which is
number 9.
$ ps | grep hard-to-stop
27398 pts/1 00:00:00 hard-to-stop
$ kill 27398
$ ps | grep hard-to-stop
27398 pts/1 00:00:00 hard-to-stop
$ kill -9 27398
$ ps | grep hard-to-stop
$
Deep Dive
Bash Documentation on Job Control



Scheduling Repeated Jobs with Cron:
==================================
If you need to repeat a task on a schedule, you can use the cron service. Every minute the cron
service checks to see if there are any scheduled jobs to run and if so runs them. Cron jobs are
often used to automate a process or perform routine maintenance. You can schedule cron jobs
by using the crontab command.
cron - A time based job scheduling service. This service is typically started when the system
boots.
crontab - A program to create, read, update, and delete your job schedules.
A crontab (cron table) is a configuration file that specifies when commands are to be executed by
cron. Each line in a crontab represents a job and contains two pieces of information: 1) when to
run and 2) what to run. The time specification consists of five fields. They are minutes, hour, day
of the month, month, and day of the week. After the time specification you provide the command
to be executed.
Crontab Format
* * * * * command
| | | | |
| | | | +-- Day of the Week (0-6)
| | | +---- Month of the Year (1-12)
| | +------ Day of the Month (1-31)
| +-------- Hour (0-23)
+---------- Minute (0-59)
The command will only be executed when all of the time specification fields match the current
date and time. You can specify that a command be run only once, but this is not the typical use
case for cron. Typically, one or more of the time specification fields will contain an asterisk (* )
which matches any time or date for that field. Here is an example crontab.
# Run every Monday at 07:00.
0 7 * * 1 /opt/sales/bin/weekly-report
Here is a graphical representation of the above crontab entry.
0 7 * * 1 /opt/sales/bin/weekly-report
| | | | |
| | | | +-- Day of the Week (0-6)
| | | +---- Month of the Year (1-12)
| | +------ Day of the Month (1-31)
| +-------- Hour (0-23)
+---------- Minute (0-59)
This job will run only when the minute is 0, the hour is 7, and the day of the week is 1. In the day
of the week field 0 represents Sunday, 1 Monday, etc. This job will run on any day and during
any month since the asterisk was used for those two fields.
If any output is generated by the command it is mailed to you. You can check your local mail with
the mail command. If you would prefer not to get email you can redirect the output of the
command as in this example.
# Run at 02:00 every day and send output to a log file.
0 2 * * * /opt/acme/bin/backup-db > /var/opt/acme/backup-db.log 2>&1
You can provide multiple values for each of the fields. If you would like to run a command every
half-hour, you could do this.
# Run every 30 minutes.
0,30 * * * * /opt/acme/bin/half-hour-check
# Another way to do the same thing.
*/2 * * * * /opt/acme/bin/half-hour-check
Instead of using 0,30 for the minute field you could have used */2 . You can even use ranges
with a dash. If you want to run a job every minute for the first four minutes of the hour you can use
this time specification: 0-4 * * * * command .
There are several implementations of the cron scheduler and some allow you to use shortcuts
and keywords in your crontabs. Common keywords have been provided below, but refer to the
documentation for cron on your system to ensure these will work.
Keyword Description Equivalent
@yearly Run once a year at midnight in the morning of January 1 0 0 1 1 *
@annually Same as @yearly 0 0 1 1 *
@monthly Run once a month at midnight in the morning of the first day of the
month
0 0 1 * *
@weekly Run once a week at midnight in the morning of Sunday 0 0 * * 0
@daily Run once a day at midnight 0 0 * * *
@midnight Same as @daily 0 0 * * *
@hourly Run once an hour at the beginning of the hour 0 * * * *
@reboot Run at startup N/A
Using the Crontab Command
Use the crontab command to manipulate cron jobs.
crontab file - Install a new crontab from file.
crontab -l - List your cron jobs.
crontab -e - Edit your cron jobs.
crontab -r - Remove all of your cron jobs.
$ crontab -l
no crontab for bob
$ cat my-cron
# Run every Monday at 07:00.
0 7 * * 1 /opt/sales/bin/weekly-report
$ crontab my-cron
$ crontab -l
# Run every Monday at 07:00.
0 7 * * 1 /opt/sales/bin/weekly-report
$ crontab -e
# $EDITOR is invoked.
$ crontab -r
$ crontab -l
no crontab for bob
$
Deep Dive
CronWFT - Decodes crontab lines. Print out human readable output.
CronMaker - A utility which helps you to build cron expressions.
Redirection - A chapter on this book on I/O redirection.












Switching Users and Running Commands as Others:
su
===============================================


One way to start a session as another user on the system is to use the su command. If no
arguments are supplied to su , it assumes you are trying to become the superuser. Executing su
is the same as executing su root . Your current environment is passed to the new shell unless
you specify a hyphen (- ). In that case, su creates an environment like you would expect to see
had you logged in as that user.
su [username] - Change user ID or become superuser
Common su options:
- - A hyphen is used to provide an environment similar to what the user would expect had the
user logged in directly.
-c command - Specify a command to be executed. If the command is more than one word in
length, it needs to be quoted.
bob@linuxsvr:~$ export TEST=1
bob@linuxsvr:~$ su oracle
Password:
oracle@linuxsvr:/home/bob$ echo $TEST
1
oracle@linuxsvr:/home/bob$ pwd
/home/bob
oracle@linuxsvr:/home/bob$ exit
exit
bob@linuxsvr:~$ su - oracle
Password:
oracle@linuxsvr:~$ echo $TEST
oracle@linuxsvr:~$ pwd
/home/oracle
oracle@linuxsvr:~$ exit
bob@linuxsvr:~$ su -c 'echo $ORACLE_HOME' oracle
Password:
bob@linuxsvr:~$ su -c 'echo $ORACLE_HOME' - oracle
Password:
/u01/app/oracle/product/current
bob@linuxsvr:~$
If you want to know what user you are working as, run the whoami command.
whoami - Displays the effective username.
$ whoami
bob
$ su oracle
Password:
$ whoami
oracle
$
Sudo - Super User Do
Another way to switch users or execute commands as others is to use the sudo command. Sudo
allows you to run programs with the security privileges of another user. Like su , if no username is
specified it assumes you are trying to run commands as the superuser. This is why sudo is
referred to as super user do. It is commonly used to install, start, and stop applications that
require superuser privileges.
sudo - Execute a command as another user, typically the superuser.
One advantage of using sudo over the su command is that you do not need to know the
password of the other user. This can eliminate the issues that arise from using shared passwords
and generic accounts. When you execute the sudo command you are prompted for your
password. If the sudo configuration permits access, the command is executed. The sudo
configuration is typically controlled by the system administrator and requires root access to
change.
Using Sudo
Here are the common ways to use the sudo command.
sudo -l - List available commands.
sudo command - Run command as the superuser.
sudo -u root command - Same as sudo command`.
sudo -u user command - Run command as user.
sudo su - Switch to the superuser account.
sudo su - - Switch to the superuser account with an environment like you would expect to see
had you logged in as that user.
sudo su - username - Switch to the username account with an environment like you would
expect to see had you logged in as that user.
$ sudo -l
User bob may run the following commands on this host:
(root) NOPASSWD: /etc/init.d/apache2
(fred) NOPASSWD: /opt/fredApp/bin/start
(fred) NOPASSWD: /opt/fredApp/bin/stop
(root) /bin/su - oracle
$ sudo /etc/init.d/apache2 start
* Starting web server apache2
$ sudo -u fred /opt/fredApp/bin/start
Fred's app started as user fred.
$ sudo su - oracle
[sudo] password for bob:
oracle@linuxsvr:~$ whoami
oracle
oracle@linuxsvr:~$ exit
$ whoami
bob
$
The output of sudo -l displays what commands can be executed with sudo and under which
account. In the above example, sudo will not prompt for a password for the commands preceded
with NOPASSWD . This type of configuration may be required to automate jobs via cron that require
escalated privileges.

