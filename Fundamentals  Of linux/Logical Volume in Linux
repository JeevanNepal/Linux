file:///C:/Users/jeeva/Downloads/lvm-linux-volume-manager-tutorial-slides.pdf



Flexible Capacity
● You can aggregate multiple storage devices
into a single logical volume.

Easily Resize Storage While Online
● Expand or shrink file systems in real-time
while the data remains online and fully
accessible.
Online Data Relocation
● Easily migrate data from one storage device
to another while online.

● You can use human-readable device names of
your choosing.
/dev/vg_database/lv_db_logs vs /dev/sdb3
Convenient Device Naming

Disk Striping
● Increase throughput by allowing your system
to read data in parallel.
Data Redundancy / Data Mirroring
● Increase fault tolerance and reliability by
having more than one copy of your data.

Snapshots
● Create point-in-time snapshots of your
filesystems.

Logical Volume Creation Process
● Create one or more physical volumes.
● Create a volume group from those one or
more physical volumes.
● Create one or more logical volumes from the
volume group.

LVM Summary
● Logical Volume Manager introduces layers of
abstraction including:
○ Physical Volumes (PVs)
○ Volume Groups (VGs)
○ Logical Volumes (LVs)
LVM Summary - Creating LVs
pvcreate /dev/sdb
vgcreate vg_name /dev/sdb
lvcreate -L 100G -n lv_name vg_name
mkfs -t ext4 /dev/vg_name/lv_name

lvextend -L +10G -r /dev/vg_name/lv_name
pvcreate /dev/sdc
vgextend vg_name /dev/sdc
LVM Summary - Extending LVs

LVM Summary - Mirrored LVs
lvcreate -m 1 -L 100G -n lv_name vg_name

lvremove /dev/vg_name/lv_name
vgreduce vg_name /dev/sdb
vgremove vg_name
pvremove /dev/sdb




















The logical volume creation process in Linux is as follows:
==========================================================
Create physical volumes (PVs). A PV is a physical storage device, such as a hard disk drive (HDD), solid-state drive (SSD), or partition, that has been initialized as a PV with LVM. Without properly initialized physical volumes, you cannot create Volume Groups or logical volumes.
Create a volume group (VG). A VG is a collection of PVs that are managed together as a single logical unit.
Create logical volumes (LVs) on the volume group. An LV is a logical unit of storage that is created from a VG. LVs can be used to create file systems, databases, or other types of storage.
The following steps show how to create a logical volume in Linux:

Identify the physical volumes that you want to use for the VG.
Create the VG using the vgcreate command.
Create the LV using the lvcreate command.
Format the LV using the mkfs command.
Mount the LV using the mount command.
For example, to create a logical volume named my_lv with a size of 100 GB on the VG named my_vg, you would use the following commands:

Code snippet
vgcreate my_vg /dev/sda1 /dev/sdb1
lvcreate -L 100G my_vg my_lv
mkfs.ext4 /dev/my_vg/my_lv
mount /dev/my_vg/my_lv /mnt/my_lv
Use code with caution. Learn more
Once the logical volume has been created, you can use it to create a file system, database, or other type of storage.

Here are some of the most common options for the lvcreate command:

-L size: Specifies the size of the LV in bytes.
-n name: Specifies the name of the LV.
-t type: Specifies the type of file system that will be created on the LV.
-f: Forces the creation of the LV, even if there is not enough space available on the VG.

















Migrating data from Physical Volumes (PVs):
==========================================
The below steps are the same, regardless of the type/vendor of underlying storage array. The disks can be from same storage array or different storage array as well.
#create PV from the new storage LUN
pvcreate /dev/sdf
#extend VG that contains the old LUN with the new PV
vgextend vg_apps /dev/sdf
#migrage all extents from old PV (/dev/sdc) to new PV (/dev/sdf). 
pvmove --atomic /dev/sdc /dev/sdf
#One can also migrate extents of a specific LV alone to new PV.
pvmove --atomic -v -n lv_apps /dev/sdc /dev/sdf
Below is an example of pvmove run on a multipath enabled device.

#create PV from the new storage LUN for a multipath device
pvcreate /dev/mapper/mpath2
#extend VG that contains the old LUN with the new PV
vgextend vg_apps /dev/mapper/mpath2
#migrage all extents from old PV (/dev/mapper/mapth0) to new PV (/dev/mapper/mapth2).
pvmove --atomic /dev/mapper/mapth0 /dev/mapper/mpath2
#One can also migrate extents of a specific LV alone to new PV.
pvmove --atomic -v -n lv_apps /dev/mapper/mapth0 /dev/mapper/mpath2
NOTE: If pvmove is interrupted for any reason (e.g. the machine crashes) then run pvmove again without any PV arguments to restart any operations that were in progress from the last checkpoint. --atomic option ensures that all affected LVs are moved to the destination PV, or none are, if the operation is aborted. 
This will ensure that all PVs are in same place, either in source or destination, so that extents are not moved partially. If for any reason pvmove is interrupted, the source will still remain intact.
